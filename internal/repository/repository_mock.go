// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	context "context"

	models "github.com/santekno/learn-golang-restful/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockArticleRepository is an autogenerated mock type for the ArticleRepository type
type MockArticleRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockArticleRepository) Delete(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockArticleRepository) GetAll(ctx context.Context) ([]*models.Article, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Article, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Article); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockArticleRepository) GetByID(ctx context.Context, id int64) (*models.Article, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Article, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Article); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, article
func (_m *MockArticleRepository) Store(ctx context.Context, article *models.Article) (int64, error) {
	ret := _m.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Article) (int64, error)); ok {
		return rf(ctx, article)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Article) int64); ok {
		r0 = rf(ctx, article)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Article) error); ok {
		r1 = rf(ctx, article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, article
func (_m *MockArticleRepository) Update(ctx context.Context, article *models.Article) (*models.Article, error) {
	ret := _m.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Article) (*models.Article, error)); ok {
		return rf(ctx, article)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Article) *models.Article); ok {
		r0 = rf(ctx, article)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Article) error); ok {
		r1 = rf(ctx, article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockArticleRepository creates a new instance of MockArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArticleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArticleRepository {
	mock := &MockArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
